{"remainingRequest":"C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\src\\pages\\RegisterPage.vue?vue&type=template&id=86ab1514&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\src\\pages\\RegisterPage.vue","mtime":1623681369874},{"path":"C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\assignment-3-3-205590656_313584294\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}